{"purpose":[{"description":"Great job implementing the custom comparison functions and integrating them with both bubble sort and quicksort. The code loads books, sorts by title, author, and total length as required.","old_code":"","new_code":""},{"description":"You should print the sorted results (titles/authors) after each sort to verify the order, as required by several tasks.","old_code":"# for book in bookshelf_v2:\n#   print(book['author_lower'])","new_code":"for book in sort_1:\n  print(book['title'])\nfor book in sort_2:\n  print(book['author'])"},{"description":"When creating bookshelf_v1 and bookshelf_v2, you are assigning references, not copies. This can cause sorting to affect the original list. Use .copy() or list() to create shallow copies.","old_code":"bookshelf_v1 = bookshelf\nbookshelf_v2 = bookshelf","new_code":"bookshelf_v1 = list(bookshelf)\nbookshelf_v2 = list(bookshelf)"}],"readability":[{"description":"Your function and variable names are clear and descriptive, making it easy to follow the code.","old_code":"","new_code":""},{"description":"Add comments to explain the purpose of each comparison function and the main sorting steps. This will help others understand your logic.","old_code":"def by_title_ascending(a, b):","new_code":"# Returns True if a's title comes after b's title alphabetically\ndef by_title_ascending(a, b):"},{"description":"Remove commented-out code or move it to a section labeled for testing/verification to keep the script clean.","old_code":"# for book in bookshelf_v2:\n#   print(book['author_lower'])","new_code":"# Print authors to verify sorting\n# for book in bookshelf_v2:\n#   print(book['author_lower'])"}],"performance":[{"description":"You correctly implemented the use of custom comparison functions, making your sorts flexible and reusable.","old_code":"","new_code":""},{"description":"For large lists, bubble sort is very slow. You should comment out or remove the bubble sort on long_bookshelf after testing, as suggested in the project.","old_code":"sort_long_1 = sorts.bubble_sort(long_bookshelf, by_total_length)","new_code":"# sort_long_1 = sorts.bubble_sort(long_bookshelf, by_total_length)"},{"description":"Consider printing the number of swaps or timing the sorts for large lists to compare performance, as this helps illustrate the efficiency difference.","old_code":"","new_code":"import time\nstart = time.time()\nqk_sort_long_1 = sorts.quicksort(long_bookshelf, 0, len(long_bookshelf) - 1, by_total_length)\nend = time.time()\nprint(f\"Quicksort took {end - start:.2f} seconds\")"}]}